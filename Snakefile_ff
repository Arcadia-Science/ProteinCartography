import os
from pathlib import Path

###########################################
## Parse config information
###########################################

# Default pipeline configuration parameters are in this file
# If you create a new yml file and use the --configfile flag, 
# options in that new file overwrite the defaults.
configfile: './config_ff.yml'

# Set the input directory
#### In the future, also accept Uniprot accession numbers, which will be auto-queried and downloaded
input_dir = Path(config["input_dir"])

# Set the prefix of the output file of the analysis
analysis_name = config["analysis_name"]

# put most things into the output directory
output_dir = Path(config["output_dir"])

# Check for an override file, setting a variable if it exists
if "override_file" in config:
    OVERRIDE_FILE = input_dir / config["override_file"]
    
    # If it isn't a real file, ignore it
    if not os.path.exists(OVERRIDE_FILE):
        OVERRIDE_FILE = ''
else:
    OVERRIDE_FILE = ''

MODES = config["plotting_modes"]

###########################################
## Setup directory structure
###########################################

# these directories fall within the output directory
blastresults_dir = Path('blastresults/')
foldseekresults_dir = Path('foldseekresults/')
foldseekclustering_dir = Path('foldseekclustering/')
clusteringresults_dir = Path('clusteringresults/')

# gets the protein ID based on PDB file name
# flexibly checks if fasta file is correct suffix
FASTA_FORMATS = ['.pdb']
PROTID = []
for file in os.listdir(input_dir):
    if any(file.lower().endswith(suffix) for suffix in FASTA_FORMATS):
        file_id = os.path.splitext(file)[0]
        PROTID.append(file_id)

######################################

rule all:
    input:
        expand(output_dir / clusteringresults_dir / (analysis_name + "_aggregated_features_{modes}.html"), modes = MODES),
        output_dir / clusteringresults_dir / (analysis_name + "_leiden_similarity.html"),
        output_dir / clusteringresults_dir / (analysis_name + "_semantic_analysis.pdf")
        

#####################################################################
## clustering and dimensionality reduction
#####################################################################

rule foldseek_clustering:
    '''
    Runs foldseek all-v-all tmscore comparison and foldseek clustering.
    '''
    input: expand(input_dir / "{protid}.pdb", protid = PROTID)
    output: 
        allvall_pivot = output_dir / clusteringresults_dir / 'all_by_all_tmscore_pivoted.tsv',
        struclusters_features = output_dir / clusteringresults_dir / 'struclusters_features.tsv'
    params:
        querydir = input_dir,
        resultsdir = output_dir / clusteringresults_dir
    shell:
        '''
        python ProteinCartography/foldseek_clustering.py -q {params.querydir} -r {params.resultsdir}
        '''

rule dim_reduction:
    '''
    Perform dimensionality reduction, saving as an embedding matrix and a TSV
    Write a set of functions to return Dataframes for interactive compute
    Write helper functions to save the dataframes only called by main()
    '''
    input: output_dir / clusteringresults_dir / 'all_by_all_tmscore_pivoted.tsv'
    output: output_dir / clusteringresults_dir / 'all_by_all_tmscore_pivoted_{modes}.tsv'
    params:
        modes = '{modes}'
    shell:
        '''
        python ProteinCartography/dim_reduction.py -i {input} -m {params.modes}
        '''

rule leiden_clustering:
    '''
    Performs Leiden clustering on the data using scanpy's implementation.
    '''
    input: output_dir / clusteringresults_dir / 'all_by_all_tmscore_pivoted.tsv'
    output: output_dir / clusteringresults_dir / 'leiden_features.tsv'
    shell:
        '''
        python ProteinCartography/leiden_clustering.py -i {input} -o {output}
        '''

#####################################################################
## aggregate features into a big TSV and make a nice plot
#####################################################################    

rule aggregate_features:
    '''
    Aggregate all TSV features provided by user in some specific directory, making one big TSV
    '''
    input:
        output_dir / clusteringresults_dir / "struclusters_features.tsv",
        input_dir / "uniprot_features.tsv",
        output_dir / clusteringresults_dir / "leiden_features.tsv"
    output: output_dir / clusteringresults_dir / (analysis_name + "_aggregated_features.tsv")
    params:
        override = OVERRIDE_FILE
    shell:
        '''
        python ProteinCartography/aggregate_features.py -i {input} -o {output} -v {params.override}
        '''
    
rule plot_interactive:
    '''
    Generate interactive scatter plot HTML programmatically based on user-input parameters
    Takes the TSV from rule aggregate_features and select default columns
    User should be able to call this module and pass their own functions to parse particular TSV columns
    Should have means to set a palette for each individual plot type, maybe as JSON?
    '''
    input:
        dimensions = output_dir / clusteringresults_dir / "all_by_all_tmscore_pivoted_{modes}.tsv",
        features = output_dir / clusteringresults_dir / (analysis_name + "_aggregated_features.tsv")
    output:
        output_dir / clusteringresults_dir / (analysis_name + "_aggregated_features_{modes}.html")
    params:
        modes = "{modes}",
        protid = expand("{protid}", protid = PROTID)
    shell:
        '''
        python ProteinCartography/plot_interactive.py -d {input.dimensions} -f {input.features} -o {output} -t {params.modes} -x euk
        '''

rule plot_similarity_leiden:
    '''
    Plots a similarity score matrix for Leiden clusters.
    For each cluster, calculates the mean TMscore of all structures in that cluster versus all other clusters.
    The diagonal of the plot shows how similar proteins are within a given cluster.
    The other cells show how similar other clusters are to each other.
    '''
    input:
        matrix = output_dir / clusteringresults_dir / 'all_by_all_tmscore_pivoted.tsv',
        features = output_dir / clusteringresults_dir / "leiden_features.tsv",
    output:
        tsv = output_dir / clusteringresults_dir / (analysis_name + "_leiden_similarity.tsv"),
        html = output_dir / clusteringresults_dir / (analysis_name + "_leiden_similarity.html")
    params:
        column = 'LeidenCluster'
    shell:
        '''
        python ProteinCartography/cluster_similarity.py -m {input.matrix} -f {input.features} -c {params.column} -T {output.tsv} -H {output.html}
        '''

rule plot_semantic_analysis:
    '''
    Plots a semantic analysis chart for groups within the data.
    '''
    input:
        features_file = output_dir / clusteringresults_dir / (analysis_name + "_aggregated_features.tsv")
    output:
        output_dir / clusteringresults_dir / (analysis_name + "_semantic_analysis.pdf")
    params:
        agg_column = 'LeidenCluster',
        annot_column = 'proteinDescription.recommendedName.fullName.value',
        analysis_name = analysis_name
    shell:
        '''
        python ProteinCartography/semantic_analysis.py -f {input.features_file} -c {params.agg_column} -n {params.annot_column} -o {output} -a {params.analysis_name}
        '''

