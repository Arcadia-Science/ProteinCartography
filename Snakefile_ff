import os
from pathlib import Path


# Default pipeline configuration parameters are in this file
# If you create a new yml file and use the --configfile flag,
# options in that new file overwrite the defaults.
configfile: "./config_ff.yml"


# Set the input directory
INPUT_DIR = Path(config["input_dir"])

# put most things into the output directory
OUTPUT_DIR = Path(config["output_dir"])

# Set the prefix of the output file of the analysis
ANALYSIS_NAME = config["analysis_name"]

# an optional user-provided override file
OVERRIDE_FILE = INPUT_DIR / config.get("override_file", "")

# if the override file doesn't exist, ignore it
# note: `OVERRIDE_FILE` cannot be set to `None` because it is passed to a CLI option
# in the `aggregate_features` rule, and snakemake serializes `None` to 'None';
# instead, we must use an empty string, so that the CLI option is passed no value
if not OVERRIDE_FILE.is_file():
    OVERRIDE_FILE = ""

# the features file is required
# (because it is the source of the "Protein names" column required in `plot_semantic_analysis`)
FEATURES_FILE = INPUT_DIR / config["features_file"]

TAXON_FOCUS = config.get("taxon_focus", "euk")

MODES = config["plotting_modes"]

# the optional user-provided list of key protein ids to highlight in the plots
KEY_PROTIDS = config.get("key_protids", [])

# these directories fall within the output directory
BENCHMARKS_DIR = OUTPUT_DIR / "benchmarks"

# metadata related to the hits (proteins) from blast and foldseek
PROTEIN_FEATURES_DIR = OUTPUT_DIR / "protein_features"

# results from running foldseek to cluster the PDBs
FOLDSEEK_CLUSTERING_DIR = OUTPUT_DIR / "foldseek_clustering_results"

# final output results (plots and aggregated TSV files)
FINAL_RESULTS_DIR = OUTPUT_DIR / "final_results"


PROTIDS = []
for filename in os.listdir(INPUT_DIR):
    if filename.lower().endswith(".pdb"):
        protid = os.path.splitext(filename)[0]
        PROTIDS.append(protid)


wildcard_constraints:
    # constrain the `protid` wildcard to an ID in `PROTIDS`
    protid="|".join(PROTIDS),
    # constrain the `mode` wildcard to one of the plotting modes specified in the config file
    mode="|".join(MODES),


rule assess_pdbs:
    """
    Calculates the quality of all PDBs downloaded from AlphaFold.
    """
    input:
        expand(INPUT_DIR / "{protid}.pdb", protid=PROTIDS),
    output:
        pdb_features=PROTEIN_FEATURES_DIR / "pdb_features.tsv",
    benchmark:
        BENCHMARKS_DIR / "assess_pdbs.txt"
    conda:
        "envs/plotting.yml"
    shell:
        """
        python ProteinCartography/assess_pdbs.py -i {INPUT_DIR} -o {output.pdb_features}
        """


rule foldseek_clustering:
    """
    Runs foldseek all-v-all tmscore comparison and foldseek clustering.

    TODO (KC): this rule is almost an exact copy of the rule in the main Snakefile.
    """
    input:
        expand(INPUT_DIR / "{protid}.pdb", protid=PROTIDS),
    output:
        all_by_all_tmscores=FOLDSEEK_CLUSTERING_DIR / "all_by_all_tmscore_pivoted.tsv",
        struclusters_features=FOLDSEEK_CLUSTERING_DIR / "struclusters_features.tsv",
    conda:
        "envs/foldseek.yml"
    benchmark:
        BENCHMARKS_DIR / "foldseek_clustering.txt"
    shell:
        """
        python ProteinCartography/foldseek_clustering.py -q {INPUT_DIR} -r {FOLDSEEK_CLUSTERING_DIR}
        """


rule dim_reduction:
    """
    Perform dimensionality reduction, saving as an embedding matrix and a TSV
    Write a set of functions to return Dataframes for interactive compute
    Write helper functions to save the dataframes only called by main()

    TODO (KC): this rule is almost an exact copy of the rule in the main Snakefile.
    """
    input:
        rules.foldseek_clustering.output.all_by_all_tmscores,
    output:
        all_by_all_tmscores=FOLDSEEK_CLUSTERING_DIR / "all_by_all_tmscore_pivoted_{mode}.tsv",
    params:
        mode="{mode}",
    conda:
        "envs/analysis.yml"
    benchmark:
        BENCHMARKS_DIR / "{mode}.dim_reduction.txt"
    shell:
        """
        python ProteinCartography/dim_reduction.py -i {input} -m {params.mode}
        """


rule leiden_clustering:
    """
    Performs Leiden clustering on the data using scanpy's implementation.

    TODO (KC): this rule is almost an exact copy of the rule in the main Snakefile.
    """
    input:
        rules.foldseek_clustering.output.all_by_all_tmscores,
    output:
        leiden_features=FOLDSEEK_CLUSTERING_DIR / "leiden_features.tsv",
    conda:
        "envs/analysis.yml"
    benchmark:
        BENCHMARKS_DIR / "leiden_clustering.txt"
    shell:
        """
        python ProteinCartography/leiden_clustering.py -i {input} -o {output.leiden_features}
        """


rule extract_input_protein_distances:
    """
    Extracts the distances from input proteins to other proteins in the dataset.
    Adds them as options for the visualization plot.
    """
    input:
        rules.foldseek_clustering.output.all_by_all_tmscores,
    output:
        distance_features=PROTEIN_FEATURES_DIR / "{protid}_distance_features.tsv",
    params:
        protid="{protid}",
    benchmark:
        BENCHMARKS_DIR / "{protid}.input_distances.txt"
    conda:
        "envs/pandas.yml"
    shell:
        """
        python ProteinCartography/extract_input_distances.py -i {input} -o {output.distance_features} -p {params.protid}
        """


rule aggregate_features:
    """
    Aggregate all TSV features provided by user in some specific directory, making one big TSV
    """
    input:
        rules.assess_pdbs.output.pdb_features,
        rules.foldseek_clustering.output.struclusters_features,
        rules.leiden_clustering.output.leiden_features,
        expand(rules.extract_input_protein_distances.output.distance_features, protid=KEY_PROTIDS),
        FEATURES_FILE,
    output:
        aggregated_features=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_aggregated_features.tsv",
    benchmark:
        BENCHMARKS_DIR / "aggregate_features.txt"
    conda:
        "envs/pandas.yml"
    shell:
        """
        python ProteinCartography/aggregate_features.py -i {input} -o {output.aggregated_features} -v {OVERRIDE_FILE}
        """


rule plot_interactive:
    """
    Generate interactive scatter plot HTML programmatically based on user-input parameters
    Takes the TSV from rule aggregate_features and select default columns
    User should be able to call this module and pass their own functions to parse particular TSV columns
    Should have means to set a palette for each individual plot type, maybe as JSON?

    TODO (KC): this rule is almost an exact copy of the rule in the main Snakefile.
    """
    input:
        tm_scores=rules.dim_reduction.output.all_by_all_tmscores,
        features=rules.aggregate_features.output.aggregated_features,
    output:
        html=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_aggregated_features_{{mode}}.html",
    params:
        mode="{mode}",
        protid=expand("{protid}", protid=KEY_PROTIDS),
    conda:
        "envs/plotting.yml"
    benchmark:
        BENCHMARKS_DIR / "{mode}.plot_interactive.txt"
    shell:
        """
        python ProteinCartography/plot_interactive.py -d {input.tm_scores} -f {input.features} -o {output.html} -t {params.mode} -k {params.protid} -x {TAXON_FOCUS}
        """


rule plot_similarity_leiden:
    """
    Plots a similarity score matrix for Leiden clusters.
    For each cluster, calculates the mean TM-score of all structures in that cluster versus all other clusters.
    The diagonal of the plot shows how similar proteins are within a given cluster.
    The other cells show how similar other clusters are to each other.

    TODO (KC): this rule is almost an exact copy of the rule in the main Snakefile.
    """
    input:
        tm_scores=rules.foldseek_clustering.output.all_by_all_tmscores,
        features=rules.leiden_clustering.output.leiden_features,
    output:
        tsv=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_leiden_similarity.tsv",
        html=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_leiden_similarity.html",
    params:
        column="LeidenCluster",
    conda:
        "envs/plotting.yml"
    benchmark:
        BENCHMARKS_DIR / "plot_similarity_leiden.txt"
    shell:
        """
        python ProteinCartography/plot_cluster_similarity.py -m {input.tm_scores} -f {input.features} -c {params.column} -T {output.tsv} -H {output.html}
        """


rule plot_similarity_strucluster:
    """
    Plots a similarity score matrix for Foldseek's structural clusters.
    For each cluster, calculates the mean TM-score of all structures in that cluster versus all other clusters.
    The diagonal of the plot shows how similar proteins are within a given cluster.
    The other cells show how similar other clusters are to each other.

    TODO (KC): this rule is almost an exact copy of the rule in the main Snakefile.
    """
    input:
        tm_scores=rules.foldseek_clustering.output.all_by_all_tmscores,
        features=rules.foldseek_clustering.output.struclusters_features,
    output:
        tsv=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_strucluster_similarity.tsv",
        html=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_strucluster_similarity.html",
    params:
        column="StruCluster",
    conda:
        "envs/plotting.yml"
    benchmark:
        BENCHMARKS_DIR / "plot_similarity_strucluster.txt"
    shell:
        """
        python ProteinCartography/plot_cluster_similarity.py -m {input.tm_scores} -f {input.features} -c {params.column} -T {output.tsv} -H {output.html}
        """


rule plot_semantic_analysis:
    """
    Plots a semantic analysis chart for groups within the data.

    TODO (KC): this rule is almost an exact copy of the rule in the main Snakefile.
    """
    input:
        features=rules.aggregate_features.output.aggregated_features,
    output:
        pdf=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_semantic_analysis.pdf",
        html=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_semantic_analysis.html",
    params:
        agg_column="LeidenCluster",
        annot_column="'Protein names'",
    conda:
        "envs/plotting.yml"
    benchmark:
        BENCHMARKS_DIR / "plot_semantic_analysis.txt"
    shell:
        """
        python ProteinCartography/semantic_analysis.py -f {input.features} -c {params.agg_column} -n {params.annot_column} -o {output.pdf} -i {output.html} -a {ANALYSIS_NAME}
        """


rule plot_cluster_distributions:
    """
    Plots distributions of key values per cluster for each input protein.
    """
    input:
        features=rules.aggregate_features.output.aggregated_features,
    output:
        svg=FINAL_RESULTS_DIR / f"{ANALYSIS_NAME}_distribution_analysis.svg",
    conda:
        "envs/plotting.yml"
    benchmark:
        BENCHMARKS_DIR / "plot_cluster_distributions.txt"
    shell:
        """
        python ProteinCartography/plot_cluster_distributions.py -i {input.features} -o {output.svg}
        """


rule all:
    """
    This rule defines the final outputs of the pipeline

    See rule `all` in the main Snakefile for an explanation
    of why this rule is at the end, rather than the beginning, of the snakefile
    """
    default_target: True
    input:
        expand(rules.plot_interactive.output.html, mode=MODES),
        rules.plot_similarity_leiden.output.html,
        rules.plot_similarity_strucluster.output.html,
        rules.plot_semantic_analysis.output.html,
        rules.plot_semantic_analysis.output.pdf,
        rules.plot_cluster_distributions.output.svg,
