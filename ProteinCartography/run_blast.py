#!/usr/bin/env python
import argparse
import os
import sys

import blast_utils
import constants
from tests import mocks

# if necessary, mock the `run_blast` method
# see comments in `tests.mocks` for more details
if os.environ.get("PROTEINCARTOGRAPHY_SHOULD_USE_MOCKS") == "true":
    mocks.mock_run_blast()


def parse_args():
    """
    Define CLI arguments for the subset of `blastp` arguments that are used by the `run_blast` rule
    following the nomenclature of the `blastp` CLI
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--query", required=True, help="path to the input peptide FASTA file.")
    parser.add_argument(
        "--out",
        required=True,
        help="path to the blastresults.tsv file generated by blastp.",
    )
    parser.add_argument(
        "--outfmt",
        default=constants.BLAST_OUTFMT,
        help="query format string.",
    )
    parser.add_argument(
        "--max_target_seqs",
        type=int,
        required=True,
        help="maximum number of hits to return.",
    )
    parser.add_argument(
        "--word_size",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--word_size_backoff",
        type=int,
        required=True,
        help="word size to which to back off if the initial call to blastp fails.",
    )
    parser.add_argument(
        "--num_attempts",
        type=int,
        required=True,
        help="The number of times to try calling blastp before exiting with an error.",
    )
    parser.add_argument(
        "--evalue",
        type=float,
        required=True,
    )
    args = parser.parse_args()

    return args


def main():
    args = parse_args()

    num_tries = 0
    max_num_tries = args.num_attempts
    while num_tries < max_num_tries:
        word_size = args.word_size if num_tries == 0 else args.word_size_backoff

        print(
            f"Attempt {num_tries + 1}/{max_num_tries} to call blastp "
            f"(using word size of {word_size})"
        )
        result = blast_utils.run_blast(
            query=args.query,
            out=args.out,
            max_target_seqs=args.max_target_seqs,
            outfmt=args.outfmt,
            word_size=word_size,
            evalue=args.evalue,
        )
        if result.returncode == 0:
            sys.exit(0)
        else:
            num_tries += 1

    if num_tries >= max_num_tries:
        sys.exit(
            f"BLAST failed after {max_num_tries} tries. The last error message was: {result.stderr}"
        )


if __name__ == "__main__":
    main()
